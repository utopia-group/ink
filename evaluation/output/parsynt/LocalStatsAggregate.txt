 SUCCESS  Parsed /home/zwang/research/ink/evaluation/parsynt/LocalStatsAggregate.minic.
 SUCCESS  Equation system: 
// --- Lifted function ---
_s1 = { output1 = {n0 = 0; n1 = 0; n2 = 0; n3 = 0; n4 = 0}; }for(x in input){
                                                               _s1 = {
                                                                 output1 =
                                                                 let output =
                                                                   (if
                                                                    x <
                                                                    _s1.output1.n1
                                                                    then
                                                                    {n0 = 
                                                                    _s1.output1.n0
                                                                    + 1;
                                                                    n1 = x;
                                                                    n2 = _s1.output1.n2;
                                                                    n3 = 
                                                                    _s1.output1.n3
                                                                    + x;
                                                                    n4 = 
                                                                    _s1.output1.n4
                                                                    + (x * x)}
                                                                    else
                                                                    _s1.output1)
                                                                   in
                                                                   if
                                                                    x >
                                                                    output.n2
                                                                    then
                                                                    {n0 = 
                                                                    output.n0 +
                                                                    1;
                                                                    n1 = output.n1;
                                                                    n2 = x;
                                                                    n3 = 
                                                                    output.n3 +
                                                                    x;
                                                                    n4 = 
                                                                    output.n4 +
                                                                    (x * x)}
                                                                    else output;
                                                               }
                                                               }
                                                               return _s1;
//--- Splitting predicate:
(input(0) >=
 let output =
   (if input(-1) < {n0 = 0; n1 = 0; n2 = 0; n3 = 0; n4 = 0}.n1 then
    {n0 = {n0 = 0; n1 = 0; n2 = 0; n3 = 0; n4 = 0}.n0 + 1; n1 = input(-1);
     n2 = {n0 = 0; n1 = 0; n2 = 0; n3 = 0; n4 = 0}.n2;
     n3 = {n0 = 0; n1 = 0; n2 = 0; n3 = 0; n4 = 0}.n3 + input(-1);
     n4 = {n0 = 0; n1 = 0; n2 = 0; n3 = 0; n4 = 0}.n4 + (input(-1) * input(-1))}
    else {n0 = 0; n1 = 0; n2 = 0; n3 = 0; n4 = 0}) in
   if input(-1) > output.n2 then
     {n0 = output.n0 + 1; n1 = output.n1; n2 = input(-1);
      n3 = output.n3 + input(-1); n4 = output.n4 + (input(-1) * input(-1))}
     else output.n1)
  && (input(0) <= output.n2)
//--- Join function ---
join($L1,$R1) = { ?? = (empty);
}
// Synthesized in (predicate : 0.06 s) + (join : 6.16 s)

 SUCCESS  Finished.
